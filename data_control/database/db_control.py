import pathlib
from sqlalchemy import select, create_engine

from .models import Player, Team, Base
import data_control.team_struct as ts

class DBControl:
    cnt: list[int] = [0, ]
    
    def __init__(self, db: str):
        if DBControl.is_db(db):
            self.db = db
        else:
            self.db = DBControl.autogenerate_name(self.cnt[0])
            # create no more than 10 files
            self.cnt[0] = 0 if self.cnt[0] > 10 else self.cnt[0] + 1

        self._path = pathlib.Path(self.db)
        self._engine = create_engine(f"sqlite:///{self.db}", echo=True, future=True)

    def create_db(self) -> None:
        self._path.touch()

    def create_all(self) -> None:
        Base.metadata.create_all(self._engine)

    def insert_team(self, team: ts.Team) -> Team:
        return Team(name=team.name)

    def insert_player(self, player: ts.Player, team_name: str = "") -> Player:
        return Player(name=player.name,
                      nickname=player.nickname,
                      team=team_name,
                      position=player.position)

    def get_team(self, name: str) -> Team:
        return select(Team).where(Team.name==name)[0]

    def get_team_with_players(self, team: str) -> tuple[Team, list[Player]]:
        return (self.get_team(team), self.get_players_of_one_team(team))

    def get_player(self, nickname: str) -> Player:
        return select(Player).where(Player.nickname==nickname)[0]

    def get_players_of_one_team(self, team: str) -> list[Player]:
        return list(select(Player).where(Player.team==team))

    # @staticmethod
    # def construct_team_from_dbdata(team: Team, players: list[Player]) -> ts.Team:
        # return ts.Team(team.name,
                       # "",
                       # [DBControl.construct_player_from_dbdata(p) for p in players])

    # @staticmethod
    # def construct_player_from_dbdata(player: Player) -> ts.Player:
        # return ts.Player(player.name, player.nickname, player.position)

    @staticmethod
    def autogenerate_name(n) -> str:
        return f"autogenerated_{n}.db"

    @staticmethod
    def is_db(db: str) -> bool:
        if db[-3:] == ".db":
            return True
        return False

    def is_created(self) -> bool:
        if self._path.is_file():
            return True
        return False

    def db_update(self, teams: list[Team]) -> None:
        pass
